{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Api = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _apisauce = require(\"apisauce\");\n\nvar _apiProblem = require(\"./api-problem\");\n\nvar _apiConfig = require(\"./api-config\");\n\nvar API_PAGE_SIZE = 50;\n\nvar convertQuestion = function convertQuestion(raw) {\n  var id = Date.now().toString();\n  return {\n    id: id,\n    category: raw.category,\n    type: raw.type,\n    difficulty: raw.difficulty,\n    question: raw.question,\n    correctAnswer: raw.correct_answer,\n    incorrectAnswers: raw.incorrect_answers\n  };\n};\n\nvar Api = function () {\n  function Api() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _apiConfig.DEFAULT_API_CONFIG;\n    (0, _classCallCheck2.default)(this, Api);\n    this.config = config;\n  }\n\n  (0, _createClass2.default)(Api, [{\n    key: \"setup\",\n    value: function setup() {\n      this.apisauce = (0, _apisauce.create)({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\"\n        }\n      });\n    }\n  }, {\n    key: \"getQuestions\",\n    value: function getQuestions() {\n      var response, problem, rawQuestions, convertedQuestions;\n      return _regenerator.default.async(function getQuestions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(this.apisauce.get(\"\", {\n                amount: API_PAGE_SIZE\n              }));\n\n            case 2:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 7;\n                break;\n              }\n\n              problem = (0, _apiProblem.getGeneralApiProblem)(response);\n\n              if (!problem) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", problem);\n\n            case 7:\n              _context.prev = 7;\n              rawQuestions = response.data.results;\n              convertedQuestions = rawQuestions.map(convertQuestion);\n              return _context.abrupt(\"return\", {\n                kind: \"ok\",\n                questions: convertedQuestions\n              });\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](7);\n              __DEV__ && console.tron.log(_context.t0.message);\n              return _context.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[7, 13]], Promise);\n    }\n  }]);\n  return Api;\n}();\n\nexports.Api = Api;","map":{"version":3,"sources":["E:/Projects/IgniteTrivia/app/services/api/api.ts"],"names":["API_PAGE_SIZE","convertQuestion","raw","id","Date","now","toString","category","type","difficulty","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","Api","config","DEFAULT_API_CONFIG","apisauce","baseURL","url","timeout","headers","Accept","get","amount","response","ok","problem","rawQuestions","data","results","convertedQuestions","map","kind","questions","__DEV__","console","tron","log","message"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA,IAAMA,aAAa,GAAG,EAAtB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAgC;AACtD,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAL,GAAWC,QAAX,EAAX;AACA,SAAO;AACLH,IAAAA,EAAE,EAAEA,EADC;AAELI,IAAAA,QAAQ,EAAEL,GAAG,CAACK,QAFT;AAGLC,IAAAA,IAAI,EAAEN,GAAG,CAACM,IAHL;AAILC,IAAAA,UAAU,EAAEP,GAAG,CAACO,UAJX;AAKLC,IAAAA,QAAQ,EAAER,GAAG,CAACQ,QALT;AAMLC,IAAAA,aAAa,EAAET,GAAG,CAACU,cANd;AAOLC,IAAAA,gBAAgB,EAAEX,GAAG,CAACY;AAPjB,GAAP;AASD,CAXD;;IAgBaC,G;AAgBX,iBAAoD;AAAA,QAAxCC,MAAwC,uEAApBC,6BAAoB;AAAA;AAClD,SAAKD,MAAL,GAAcA,MAAd;AACD;;;;4BASO;AAEN,WAAKE,QAAL,GAAgB,sBAAO;AACrBC,QAAAA,OAAO,EAAE,KAAKH,MAAL,CAAYI,GADA;AAErBC,QAAAA,OAAO,EAAE,KAAKL,MAAL,CAAYK,OAFA;AAGrBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD;AAHY,OAAP,CAAhB;AAOD;;;;;;;;;;gDAI0C,KAAKL,QAAL,CAAcM,GAAd,CAAkB,EAAlB,EAAsB;AAAEC,gBAAAA,MAAM,EAAEzB;AAAV,eAAtB,C;;;AAAnC0B,cAAAA,Q;;kBAGDA,QAAQ,CAACC,E;;;;;AACNC,cAAAA,O,GAAU,sCAAqBF,QAArB,C;;mBACZE,O;;;;;+CAAgBA,O;;;;AAKdC,cAAAA,Y,GAAeH,QAAQ,CAACI,IAAT,CAAcC,O;AAC7BC,cAAAA,kB,GAAyCH,YAAY,CAACI,GAAb,CAAiBhC,eAAjB,C;+CACxC;AAAEiC,gBAAAA,IAAI,EAAE,IAAR;AAAcC,gBAAAA,SAAS,EAAEH;AAAzB,e;;;;;AAEPI,cAAAA,OAAO,IAAIC,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,YAAEC,OAAnB,CAAX;+CACO;AAAEN,gBAAAA,IAAI,EAAE;AAAR,e","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from \"apisauce\"\nimport { getGeneralApiProblem } from \"./api-problem\"\nimport { ApiConfig, DEFAULT_API_CONFIG } from \"./api-config\"\nimport * as Types from \"./api.types\"\nimport { QuestionSnapshot } from \"../../models/question\"\nconst API_PAGE_SIZE = 50\n\nconst convertQuestion = (raw: any): QuestionSnapshot => {\n  const id = Date.now().toString();\n  return {\n    id: id,\n    category: raw.category,\n    type: raw.type,\n    difficulty: raw.difficulty,\n    question: raw.question,\n    correctAnswer: raw.correct_answer,\n    incorrectAnswers: raw.incorrect_answers,\n  }\n}\n\n/**\n * Manages all requests to the API.\n */\nexport class Api {\n  /**\n   * The underlying apisauce instance which performs the requests.\n   */\n  apisauce: ApisauceInstance\n\n  /**\n   * Configurable options.\n   */\n  config: ApiConfig\n\n  /**\n   * Creates the api.\n   *\n   * @param config The configuration to use.\n   */\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config\n  }\n\n  /**\n   * Sets up the API.  This will be called during the bootup\n   * sequence and will happen before the first React component\n   * is mounted.\n   *\n   * Be as quick as possible in here.\n   */\n  setup() {\n    // construct the apisauce instance\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n  }\n\n  async getQuestions(): Promise<any> {\n    // make the api call\n    const response: ApiResponse<any> = await this.apisauce.get(\"\", { amount: API_PAGE_SIZE })\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    // transform the data into the format we are expecting\n    try {\n      const rawQuestions = response.data.results\n      const convertedQuestions: QuestionSnapshot[] = rawQuestions.map(convertQuestion)\n      return { kind: \"ok\", questions: convertedQuestions }\n    } catch (e) {\n      __DEV__ && console.tron.log(e.message)\n      return { kind: \"bad-data\" }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}