{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar NavigationBuilderContext = React.createContext({\n  trackAction: function trackAction() {\n    return undefined;\n  }\n});\nvar _default = NavigationBuilderContext;\nexports.default = _default;","map":{"version":3,"sources":["NavigationBuilderContext.tsx"],"names":["NavigationBuilderContext","trackAction","undefined"],"mappings":";;;;;;;AAAA;;AA0BA,IAAMA,wBAAwB,GAAG,KAAK,CAAL,aAAA,CAU9B;AACDC,EAAAA,WAAW,EAAE;AAAA,WAAMC,SAAN;AAAA;AADZ,CAV8B,CAAjC;eAcA,wB","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/routers';\nimport { NavigationHelpers } from './types';\n\nexport type ChildActionListener = (\n  action: NavigationAction,\n  visitedNavigators?: Set<string>\n) => boolean;\n\nexport type FocusedNavigationCallback<T> = (\n  navigation: NavigationHelpers<ParamListBase>\n) => T;\n\nexport type FocusedNavigationListener = <T>(\n  callback: FocusedNavigationCallback<T>\n) => { handled: boolean; result: T };\n\nexport type NavigatorStateGetter = () => NavigationState;\n\n/**\n * Context which holds the required helpers needed to build nested navigators.\n */\nconst NavigationBuilderContext = React.createContext<{\n  onAction?: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  addActionListener?: (listener: ChildActionListener) => void;\n  addFocusedListener?: (listener: FocusedNavigationListener) => void;\n  onRouteFocus?: (key: string) => void;\n  addStateGetter?: (key: string, getter: NavigatorStateGetter) => void;\n  trackAction: (action: NavigationAction) => void;\n}>({\n  trackAction: () => undefined,\n});\n\nexport default NavigationBuilderContext;\n"]},"metadata":{},"sourceType":"script"}