{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = StackRouter;\nexports.StackActions = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _BaseRouter = _interopRequireDefault(require(\"./BaseRouter\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexports.StackActions = StackActions;\n\nfunction StackRouter(options) {\n  var router = _objectSpread({}, _BaseRouter.default, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n          routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat((0, _nonSecure.nanoid)()),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat((0, _nonSecure.nanoid)()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread({}, route, {\n          key: route.key || \"\".concat(route.name, \"-\").concat((0, _nonSecure.nanoid)()),\n          params: routeParamList[route.name] !== undefined ? _objectSpread({}, routeParamList[route.name], {}, route.params) : route.params\n        });\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat((0, _nonSecure.nanoid)()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat((0, _nonSecure.nanoid)()),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat((0, _nonSecure.nanoid)()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return _objectSpread({}, state, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return _objectSpread({}, state, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            var _action$payload = action.payload,\n                name = _action$payload.name,\n                key = _action$payload.key,\n                params = _action$payload.params;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return _objectSpread({}, state, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : \"\".concat(name, \"-\").concat((0, _nonSecure.nanoid)()),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread({}, routeParamList[name], {}, params) : params\n                } : route;\n              })\n            });\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            return _objectSpread({}, state, {\n              index: state.index + 1,\n              routes: [].concat((0, _toConsumableArray2.default)(state.routes), [{\n                key: action.payload.key === undefined ? \"\".concat(action.payload.name, \"-\").concat((0, _nonSecure.nanoid)()) : action.payload.key,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], {}, action.payload.params) : action.payload.params\n              }])\n            });\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n              var routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n              return _objectSpread({}, state, {\n                index: routes.length - 1,\n                routes: routes\n              });\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.key || action.payload.name && state.routeNames.includes(action.payload.name)) {\n            var _index2 = -1;\n\n            if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(state, {\n                type: 'PUSH',\n                payload: {\n                  key: action.payload.key,\n                  name: action.payload.name,\n                  params: action.payload.params\n                }\n              }, options);\n            }\n\n            return _objectSpread({}, state, {\n              index: _index2,\n              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index2)), [action.payload.params !== undefined ? _objectSpread({}, state.routes[_index2], {\n                params: _objectSpread({}, state.routes[_index2].params, {}, action.payload.params)\n              }) : state.routes[_index2]])\n            });\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return _BaseRouter.default.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n\n  return router;\n}","map":{"version":3,"sources":["StackRouter.tsx"],"names":["StackActions","replace","type","payload","name","params","push","pop","count","popToTop","router","getInitialState","routeParamList","initialRouteName","options","routeNames","stale","key","index","routes","getRehydratedState","state","route","getStateForRouteNamesChange","Math","getStateForRouteFocus","r","getStateForAction","action","i","target","source","BaseRouter","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport {\n  NavigationState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState = NavigationState & {\n  /**\n   * Type of the router, in this case, it's stack.\n   */\n  type: 'stack';\n};\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: ParamList[RouteName] extends undefined\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: ParamList[RouteName] extends undefined | any\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = state.routes.filter((route) =>\n        routeNames.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index = action.source\n            ? state.routes.findIndex((r) => r.key === action.source)\n            : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            return {\n              ...state,\n              index: state.index + 1,\n              routes: [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key === undefined\n                      ? `${action.payload.name}-${nanoid()}`\n                      : action.payload.key,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ],\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.key ||\n            (action.payload.name &&\n              state.routeNames.includes(action.payload.name))\n          ) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(\n                state,\n                {\n                  type: 'PUSH',\n                  payload: {\n                    key: action.payload.key,\n                    name: action.payload.name,\n                    params: action.payload.params,\n                  },\n                },\n                options\n              );\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                action.payload.params !== undefined\n                  ? {\n                      ...state.routes[index],\n                      params: {\n                        ...state.routes[index].params,\n                        ...action.payload.params,\n                      },\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"script"}