{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NAVIGATION_PERSISTENCE_KEY = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nrequire(\"./i18n\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _fonts = require(\"./theme/fonts\");\n\nvar _ramda = require(\"ramda\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _navigation = require(\"./navigation\");\n\nvar _useBackButtonHandler = require(\"./navigation/use-back-button-handler\");\n\nvar _rootStore = require(\"./models/root-store\");\n\nvar storage = _interopRequireWildcard(require(\"./utils/storage\"));\n\nvar _getActiveRoutename = _interopRequireDefault(require(\"./navigation/get-active-routename\"));\n\nvar _jsxFileName = \"E:\\\\Projects\\\\IgniteTrivia\\\\app\\\\app.tsx\";\n(0, _reactNativeScreens.enableScreens)();\n\n_reactNative.YellowBox.ignoreWarnings([\"componentWillMount is deprecated\", \"componentWillReceiveProps is deprecated\", \"Require cycle:\"]);\n\nvar canExit = function canExit(routeName) {\n  return (0, _ramda.contains)(routeName, _navigation.exitRoutes);\n};\n\nvar NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\";\nexports.NAVIGATION_PERSISTENCE_KEY = NAVIGATION_PERSISTENCE_KEY;\n\nvar App = function App() {\n  var navigationRef = (0, _react.useRef)();\n\n  var _useState = (0, _react.useState)(undefined),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      rootStore = _useState2[0],\n      setRootStore = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      initialNavigationState = _useState4[0],\n      setInitialNavigationState = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(true),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      isRestoringNavigationState = _useState6[0],\n      setIsRestoringNavigationState = _useState6[1];\n\n  (0, _navigation.setRootNavigation)(navigationRef);\n  (0, _useBackButtonHandler.useBackButtonHandler)(navigationRef, canExit);\n  var routeNameRef = (0, _react.useRef)();\n\n  var onNavigationStateChange = function onNavigationStateChange(state) {\n    var previousRouteName = routeNameRef.current;\n    var currentRouteName = (0, _getActiveRoutename.default)(state);\n\n    if (previousRouteName !== currentRouteName) {\n      __DEV__ && console.tron.log(currentRouteName);\n    }\n\n    routeNameRef.current = currentRouteName;\n    storage.save(NAVIGATION_PERSISTENCE_KEY, state);\n  };\n\n  (0, _react.useEffect)(function () {\n    (function _callee() {\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap((0, _fonts.initFonts)());\n\n            case 2:\n              (0, _rootStore.setupRootStore)().then(setRootStore);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  (0, _react.useEffect)(function () {\n    var restoreState = function restoreState() {\n      var state;\n      return _regenerator.default.async(function restoreState$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regenerator.default.awrap(storage.load(NAVIGATION_PERSISTENCE_KEY));\n\n            case 3:\n              state = _context2.sent;\n\n              if (state) {\n                setInitialNavigationState(state);\n              }\n\n            case 5:\n              _context2.prev = 5;\n              setIsRestoringNavigationState(false);\n              return _context2.finish(5);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0,, 5, 8]], Promise);\n    };\n\n    if (isRestoringNavigationState) {\n      restoreState();\n    }\n  }, [isRestoringNavigationState]);\n\n  if (!rootStore) {\n    return null;\n  }\n\n  return _react.default.createElement(_rootStore.RootStoreProvider, {\n    value: rootStore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialSafeAreaInsets: _reactNativeSafeAreaContext.initialWindowSafeAreaInsets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_navigation.RootNavigator, {\n    ref: navigationRef,\n    initialState: initialNavigationState,\n    onStateChange: onNavigationStateChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["E:/Projects/IgniteTrivia/app/app.tsx"],"names":["YellowBox","ignoreWarnings","canExit","routeName","exitRoutes","NAVIGATION_PERSISTENCE_KEY","App","navigationRef","undefined","rootStore","setRootStore","initialNavigationState","setInitialNavigationState","isRestoringNavigationState","setIsRestoringNavigationState","routeNameRef","onNavigationStateChange","state","previousRouteName","current","currentRouteName","__DEV__","console","tron","log","storage","save","then","restoreState","load","initialWindowSafeAreaInsets"],"mappings":";;;;;;;;;;;;;AAIA;;AACA;;AACA;;AAEE;;AACF;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;AAKA;;AAMAA,uBAAUC,cAAV,CAAyB,CACvB,kCADuB,EAEvB,yCAFuB,EAGvB,gBAHuB,CAAzB;;AAYA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SAAuB,qBAASA,SAAT,EAAoBC,sBAApB,CAAvB;AAAA,CAAhB;;AAEO,IAAMC,0BAA0B,GAAG,kBAAnC;;;AAKP,IAAMC,GAAgC,GAAG,SAAnCA,GAAmC,GAAM;AAC7C,MAAMC,aAAa,GAAG,oBAAtB;;AAD6C,kBAEX,qBAAgCC,SAAhC,CAFW;AAAA;AAAA,MAEtCC,SAFsC;AAAA,MAE3BC,YAF2B;;AAAA,mBAGe,sBAHf;AAAA;AAAA,MAGtCC,sBAHsC;AAAA,MAGdC,yBAHc;;AAAA,mBAIuB,qBAAS,IAAT,CAJvB;AAAA;AAAA,MAItCC,0BAJsC;AAAA,MAIVC,6BAJU;;AAM7C,qCAAkBP,aAAlB;AACA,kDAAqBA,aAArB,EAAoCL,OAApC;AAOA,MAAMa,YAAY,GAAG,oBAArB;;AACA,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,KAAK,EAAI;AACvC,QAAMC,iBAAiB,GAAGH,YAAY,CAACI,OAAvC;AACA,QAAMC,gBAAgB,GAAG,iCAAmBH,KAAnB,CAAzB;;AAEA,QAAIC,iBAAiB,KAAKE,gBAA1B,EAA4C;AAE1CC,MAAAA,OAAO,IAAIC,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBJ,gBAAjB,CAAX;AACD;;AAGDL,IAAAA,YAAY,CAACI,OAAb,GAAuBC,gBAAvB;AAGAK,IAAAA,OAAO,CAACC,IAAR,CAAarB,0BAAb,EAAyCY,KAAzC;AACD,GAdD;;AAgBA,wBAAU,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACW,uBADX;;AAAA;AAEK,+CAAiBU,IAAjB,CAAsBjB,YAAtB;;AAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALD,EAKG,EALH;AAOA,wBAAU,YAAM;AACd,QAAMkB,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAEGH,OAAO,CAACI,IAAR,CAAaxB,0BAAb,CAFH;;AAAA;AAEXY,cAAAA,KAFW;;AAIjB,kBAAIA,KAAJ,EAAW;AACTL,gBAAAA,yBAAyB,CAACK,KAAD,CAAzB;AACD;;AANgB;AAAA;AAQjBH,cAAAA,6BAA6B,CAAC,KAAD,CAA7B;AARiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAYA,QAAID,0BAAJ,EAAgC;AAC9Be,MAAAA,YAAY;AACb;AACF,GAhBD,EAgBG,CAACf,0BAAD,CAhBH;;AA0BA,MAAI,CAACJ,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AAGD,SACE,6BAAC,4BAAD;AAAmB,IAAA,KAAK,EAAEA,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,4CAAD;AAAkB,IAAA,qBAAqB,EAAEqB,uDAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,yBAAD;AACE,IAAA,GAAG,EAAEvB,aADP;AAEE,IAAA,YAAY,EAAEI,sBAFhB;AAGE,IAAA,aAAa,EAAEK,uBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAWD,CAhFD;;eAkFeV,G","sourcesContent":["// Welcome to the main entry point of the app.\n//\n// In this file, we'll be kicking off our app or storybook.\n\nimport \"./i18n\"\nimport React, { useState, useEffect, useRef } from \"react\"\nimport { YellowBox } from \"react-native\"\nimport { NavigationContainerRef } from \"@react-navigation/native\"\n  import { initFonts } from \"./theme/fonts\"\nimport { contains } from \"ramda\"\nimport { enableScreens } from \"react-native-screens\"\nimport { SafeAreaProvider, initialWindowSafeAreaInsets } from \"react-native-safe-area-context\"\n\nimport { RootNavigator, exitRoutes, setRootNavigation } from \"./navigation\"\nimport { useBackButtonHandler } from \"./navigation/use-back-button-handler\"\nimport { RootStore, RootStoreProvider, setupRootStore } from \"./models/root-store\"\nimport * as storage from \"./utils/storage\"\nimport getActiveRouteName from \"./navigation/get-active-routename\"\n\n// This puts screens in a native ViewController or Activity. If you want fully native\n// stack navigation, use `createNativeStackNavigator` in place of `createStackNavigator`:\n// https://github.com/kmagiera/react-native-screens#using-native-stack-navigator\nenableScreens()\n\n/**\n * Ignore some yellowbox warnings. Some of these are for deprecated functions\n * that we haven't gotten around to replacing yet.\n */\nYellowBox.ignoreWarnings([\n  \"componentWillMount is deprecated\",\n  \"componentWillReceiveProps is deprecated\",\n  \"Require cycle:\",\n])\n\n/**\n * Are we allowed to exit the app?  This is called when the back button\n * is pressed on android.\n *\n * @param routeName The currently active route name.\n */\nconst canExit = (routeName: string) => contains(routeName, exitRoutes)\n\nexport const NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\"\n\n/**\n * This is the root component of our app.\n */\nconst App: React.FunctionComponent<{}> = () => {\n  const navigationRef = useRef<NavigationContainerRef>()\n  const [rootStore, setRootStore] = useState<RootStore | undefined>(undefined)\n  const [initialNavigationState, setInitialNavigationState] = useState()\n  const [isRestoringNavigationState, setIsRestoringNavigationState] = useState(true)\n\n  setRootNavigation(navigationRef)\n  useBackButtonHandler(navigationRef, canExit)\n\n  /**\n   * Keep track of state changes\n   * Track Screens\n   * Persist State\n   */\n  const routeNameRef = useRef()\n  const onNavigationStateChange = state => {\n    const previousRouteName = routeNameRef.current\n    const currentRouteName = getActiveRouteName(state)\n\n    if (previousRouteName !== currentRouteName) {\n      // track screens.\n      __DEV__ && console.tron.log(currentRouteName)\n    }\n\n    // Save the current route name for later comparision\n    routeNameRef.current = currentRouteName\n\n    // Persist state to storage\n    storage.save(NAVIGATION_PERSISTENCE_KEY, state)\n  }\n\n  useEffect(() => {\n    (async () => {\n          await initFonts()\n          setupRootStore().then(setRootStore)\n    })()\n  }, [])\n\n  useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const state = await storage.load(NAVIGATION_PERSISTENCE_KEY)\n\n        if (state) {\n          setInitialNavigationState(state)\n        }\n      } finally {\n        setIsRestoringNavigationState(false)\n      }\n    }\n\n    if (isRestoringNavigationState) {\n      restoreState()\n    }\n  }, [isRestoringNavigationState])\n\n  // Before we show the app, we have to wait for our state to be ready.\n  // In the meantime, don't render anything. This will be the background\n  // color set in native by rootView's background color.\n  //\n  // This step should be completely covered over by the splash screen though.\n  //\n  // You're welcome to swap in your own component to render if your boot up\n  // sequence is too slow though.\n  if (!rootStore) {\n    return null\n  }\n\n  // otherwise, we're ready to render the app\n  return (\n    <RootStoreProvider value={rootStore}>\n      <SafeAreaProvider initialSafeAreaInsets={initialWindowSafeAreaInsets}>\n        <RootNavigator\n          ref={navigationRef}\n          initialState={initialNavigationState}\n          onStateChange={onNavigationStateChange}\n        />\n      </SafeAreaProvider>\n    </RootStoreProvider>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"script"}