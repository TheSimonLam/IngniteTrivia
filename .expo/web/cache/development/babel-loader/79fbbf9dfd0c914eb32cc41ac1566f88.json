{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = NativeStackView;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _HeaderConfig = _interopRequireDefault(require(\"./HeaderConfig\"));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Screen = _reactNativeScreens.Screen;\n\nfunction NativeStackView(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  return React.createElement(_reactNativeScreens.ScreenStack, {\n    style: styles.container\n  }, state.routes.map(function (route) {\n    var _descriptors$route$ke = descriptors[route.key],\n        options = _descriptors$route$ke.options,\n        renderScene = _descriptors$route$ke.render;\n    var gestureEnabled = options.gestureEnabled,\n        _options$stackPresent = options.stackPresentation,\n        stackPresentation = _options$stackPresent === void 0 ? 'push' : _options$stackPresent,\n        stackAnimation = options.stackAnimation,\n        contentStyle = options.contentStyle;\n    return React.createElement(Screen, {\n      key: route.key,\n      style: _reactNative.StyleSheet.absoluteFill,\n      gestureEnabled: gestureEnabled,\n      stackPresentation: stackPresentation,\n      stackAnimation: stackAnimation,\n      onAppear: function onAppear() {\n        navigation.emit({\n          type: 'appear',\n          target: route.key\n        });\n      },\n      onDismissed: function onDismissed() {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key\n        });\n        navigation.dispatch(_objectSpread({}, _native.StackActions.pop(), {\n          source: route.key,\n          target: state.key\n        }));\n      }\n    }, React.createElement(_HeaderConfig.default, _extends({}, options, {\n      route: route\n    })), React.createElement(_reactNative.View, {\n      style: [styles.container, {\n        backgroundColor: colors.background\n      }, contentStyle]\n    }, renderScene()));\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["NativeStackView.tsx"],"names":["Screen","descriptors","colors","styles","container","route","render","renderScene","stackPresentation","contentStyle","StyleSheet","navigation","type","target","key","StackActions","source","state","backgroundColor","background","flex"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAMA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,MAAM,GAAZ,0BAAA;;AAQe,SAAA,eAAA,CAAA,IAAA,EAIL;AAAA,MAJ8B,KAI9B,GAAA,IAAA,CAJ8B,KAI9B;AAAA,MAJ8B,UAI9B,GAAA,IAAA,CAJ8B,UAI9B;AAAA,MADRC,WACQ,GAAA,IAAA,CADRA,WACQ;;AAAA,kBACR,uBADQ;AAAA,MACAC,MADA,aACAA,MADA;;AAGR,SACE,KAAA,CAAA,aAAA,CAAA,+BAAA,EAAA;AAAa,IAAA,KAAK,EAAEC,MAAM,CAACC;AAA3B,GAAA,EACG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiBC,UAAAA,KAAK,EAAI;AAAA,gCACgBJ,WAAW,CAACI,KAAK,CAA1D,GAAoD,CAD3B;AAAA,QACnB,OADmB,yBACnB,OADmB;AAAA,QACAE,WADA,yBACRD,MADQ;AAAA,QAEnB,cAFmB,GAEzB,OAFyB,CAEnB,cAFmB;AAAA,gCAEzB,OAFyB,CAIvBE,iBAJuB;AAAA,QAIvBA,iBAJuB,sCAEnB,MAFmB;AAAA,QAEnB,cAFmB,GAEzB,OAFyB,CAEnB,cAFmB;AAAA,QAMvBC,YANuB,GAEzB,OAFyB,CAMvBA,YANuB;AASzB,WACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,MAAA,GAAG,EAAEJ,KAAK,CADZ,GAAA;AAEE,MAAA,KAAK,EAAEK,wBAFT,YAAA;AAGE,MAAA,cAAc,EAHhB,cAAA;AAIE,MAAA,iBAAiB,EAJnB,iBAAA;AAKE,MAAA,cAAc,EALhB,cAAA;AAME,MAAA,QAAQ,EAAE,oBAAM;AACdC,QAAAA,UAAU,CAAVA,IAAAA,CAAgB;AACdC,UAAAA,IAAI,EADU,QAAA;AAEdC,UAAAA,MAAM,EAAER,KAAK,CAACS;AAFA,SAAhBH;AAPJ,OAAA;AAYE,MAAA,WAAW,EAAE,uBAAM;AACjBA,QAAAA,UAAU,CAAVA,IAAAA,CAAgB;AACdC,UAAAA,IAAI,EADU,SAAA;AAEdC,UAAAA,MAAM,EAAER,KAAK,CAACS;AAFA,SAAhBH;AAKAA,QAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKI,qBADLJ,GACKI,EADLJ,EAAAA;AAEEK,UAAAA,MAAM,EAAEX,KAAK,CAFfM,GAAAA;AAGEE,UAAAA,MAAM,EAAEI,KAAK,CAACH;AAHhBH,SAAAA,CAAAA;AAKD;AAvBH,KAAA,EAyBE,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAA2B,MAAA,KAAK,EAAEN;AAAlC,KAAA,CAAA,CAzBF,EA0BE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,MAAA,KAAK,EAAE,CACLF,MAAM,CADD,SAAA,EAEL;AAAEe,QAAAA,eAAe,EAAEhB,MAAM,CAACiB;AAA1B,OAFK,EAAA,YAAA;AADT,KAAA,EAOGZ,WAlCP,EA2BI,CA1BF,CADF;AAXN,GAEK,CADH,CADF;AAoDD;;AAED,IAAMJ,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTgB,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  ScreenStack,\n  Screen as ScreenComponent,\n  ScreenProps,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport {\n  StackNavigationState,\n  StackActions,\n  useTheme,\n} from '@react-navigation/native';\nimport HeaderConfig from './HeaderConfig';\nimport {\n  NativeStackNavigationHelpers,\n  NativeStackDescriptorMap,\n} from '../types';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map(route => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={gestureEnabled}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n          >\n            <HeaderConfig {...options} route={route} />\n            <View\n              style={[\n                styles.container,\n                { backgroundColor: colors.background },\n                contentStyle,\n              ]}\n            >\n              {renderScene()}\n            </View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}