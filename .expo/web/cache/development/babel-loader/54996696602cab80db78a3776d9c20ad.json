{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocalizationAsync = getLocalizationAsync;\nexports.isRTL = exports.region = exports.isoCurrencyCodes = exports.timezone = exports.locales = exports.locale = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _ExpoLocalization = _interopRequireDefault(require(\"./ExpoLocalization\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar parseLocale = function parseLocale(locale) {\n  return locale.replace('_', '-');\n};\n\nvar locale = parseLocale(_ExpoLocalization.default.locale);\nexports.locale = locale;\n\nvar locales = _ExpoLocalization.default.locales.map(parseLocale);\n\nexports.locales = locales;\nvar timezone = _ExpoLocalization.default.timezone;\nexports.timezone = timezone;\nvar isoCurrencyCodes = _ExpoLocalization.default.isoCurrencyCodes;\nexports.isoCurrencyCodes = isoCurrencyCodes;\nvar region = _ExpoLocalization.default.region;\nexports.region = region;\nvar isRTL = _ExpoLocalization.default.isRTL;\nexports.isRTL = isRTL;\n\nfunction getLocalizationAsync() {\n  var _await$ExpoLocalizati, locale, locales, localization;\n\n  return _regenerator.default.async(function getLocalizationAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regenerator.default.awrap(_ExpoLocalization.default.getLocalizationAsync());\n\n        case 2:\n          _await$ExpoLocalizati = _context.sent;\n          locale = _await$ExpoLocalizati.locale;\n          locales = _await$ExpoLocalizati.locales;\n          localization = (0, _objectWithoutProperties2.default)(_await$ExpoLocalizati, [\"locale\", \"locales\"]);\n          return _context.abrupt(\"return\", _objectSpread({\n            locale: parseLocale(locale),\n            locales: _ExpoLocalization.default.locales.map(parseLocale)\n          }, localization));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Localization.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAOA,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,MAAD;AAAA,SAA4B,MAAM,CAAC,OAAP,CAAe,GAAf,EAAoB,GAApB,CAA5B;AAAA,CAApB;;AAEO,IAAM,MAAM,GAAG,WAAW,CAAC,0BAAiB,MAAlB,CAA1B;;;AACA,IAAM,OAAO,GAAG,0BAAiB,OAAjB,CAAyB,GAAzB,CAA6B,WAA7B,CAAhB;;;AACA,IAAM,QAAQ,GAAG,0BAAiB,QAAlC;;AACA,IAAM,gBAAgB,GAAG,0BAAiB,gBAA1C;;AACA,IAAM,MAAM,GAAG,0BAAiB,MAAhC;;AACA,IAAM,KAAK,GAAG,0BAAiB,KAA/B;;;AAEA,SAAe,oBAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAC8C,0BAAiB,oBAAjB,EAD9C;;AAAA;AAAA;AACG,UAAA,MADH,yBACG,MADH;AACW,UAAA,OADX,yBACW,OADX;AACuB,UAAA,YADvB;AAAA;AAGH,YAAA,MAAM,EAAE,WAAW,CAAC,MAAD,CAHhB;AAIH,YAAA,OAAO,EAAE,0BAAiB,OAAjB,CAAyB,GAAzB,CAA6B,WAA7B;AAJN,aAKA,YALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import ExpoLocalization from './ExpoLocalization';\nimport { Localization } from './Localization.types';\n\nexport { Localization };\n\n// Web, Android, and some iOS values use `-`. This will convert the iOS values that use `_`\n// https://github.com/expo/expo/blob/21ae94bae2e8369992050c433a00699d425b35bd/packages/expo/src/Localization.ts#L112-L114\nconst parseLocale = (locale: string): string => locale.replace('_', '-');\n\nexport const locale = parseLocale(ExpoLocalization.locale);\nexport const locales = ExpoLocalization.locales.map(parseLocale);\nexport const timezone = ExpoLocalization.timezone;\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\nexport const region = ExpoLocalization.region; // iOS, Web\nexport const isRTL = ExpoLocalization.isRTL;\n\nexport async function getLocalizationAsync(): Promise<Localization> {\n  const { locale, locales, ...localization } = await ExpoLocalization.getLocalizationAsync();\n  return {\n    locale: parseLocale(locale),\n    locales: ExpoLocalization.locales.map(parseLocale),\n    ...localization,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}