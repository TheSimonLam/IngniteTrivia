{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _applyLayout = _interopRequireDefault(require(\"../../modules/applyLayout\"));\n\nvar _applyNativeMethods = _interopRequireDefault(require(\"../../modules/applyNativeMethods\"));\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _createElement = _interopRequireDefault(require(\"../createElement\"));\n\nvar _css = _interopRequireDefault(require(\"../StyleSheet/css\"));\n\nvar _filterSupportedProps = _interopRequireDefault(require(\"../View/filterSupportedProps\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../findNodeHandle\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../StyleSheet\"));\n\nvar _TextInputState = _interopRequireDefault(require(\"../../modules/TextInputState\"));\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar isAndroid = _ExecutionEnvironment.canUseDOM && /Android/i.test(navigator && navigator.userAgent);\nvar emptyObject = {};\n\nvar normalizeEventHandler = function normalizeEventHandler(handler) {\n  return function (e) {\n    if (handler) {\n      e.nativeEvent.text = e.target.value;\n      return handler(e);\n    }\n  };\n};\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  if (node != null && selection != null) {\n    var selectionEnd = node.selectionEnd,\n        selectionStart = node.selectionStart;\n    var start = selection.start,\n        end = selection.end;\n    return start !== selectionStart || end !== selectionEnd;\n  }\n\n  return false;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  try {\n    if (node != null && selection != null && isSelectionStale(node, selection)) {\n      var start = selection.start,\n          end = selection.end;\n\n      if (isAndroid) {\n        setTimeout(function () {\n          return node.setSelectionRange(start, end || start);\n        }, 10);\n      } else {\n        node.setSelectionRange(start, end || start);\n      }\n    }\n  } catch (e) {}\n};\n\nvar TextInput = function (_React$Component) {\n  _inheritsLoose(TextInput, _React$Component);\n\n  function TextInput() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this._handleBlur = function (e) {\n      var onBlur = _this.props.onBlur;\n      _TextInputState.default._currentlyFocusedNode = null;\n\n      if (onBlur) {\n        onBlur(e);\n      }\n    };\n\n    _this._handleContentSizeChange = function () {\n      var _this$props = _this.props,\n          onContentSizeChange = _this$props.onContentSizeChange,\n          multiline = _this$props.multiline;\n\n      if (multiline && onContentSizeChange) {\n        var newHeight = _this._node.scrollHeight;\n        var newWidth = _this._node.scrollWidth;\n\n        if (newHeight !== _this._nodeHeight || newWidth !== _this._nodeWidth) {\n          _this._nodeHeight = newHeight;\n          _this._nodeWidth = newWidth;\n          onContentSizeChange({\n            nativeEvent: {\n              contentSize: {\n                height: _this._nodeHeight,\n                width: _this._nodeWidth\n              }\n            }\n          });\n        }\n      }\n    };\n\n    _this._handleChange = function (e) {\n      var _this$props2 = _this.props,\n          onChange = _this$props2.onChange,\n          onChangeText = _this$props2.onChangeText;\n      var text = e.nativeEvent.text;\n\n      _this._handleContentSizeChange();\n\n      if (onChange) {\n        onChange(e);\n      }\n\n      if (onChangeText) {\n        onChangeText(text);\n      }\n\n      _this._handleSelectionChange(e);\n    };\n\n    _this._handleFocus = function (e) {\n      var _this$props3 = _this.props,\n          clearTextOnFocus = _this$props3.clearTextOnFocus,\n          onFocus = _this$props3.onFocus,\n          selectTextOnFocus = _this$props3.selectTextOnFocus;\n      var node = _this._node;\n      _TextInputState.default._currentlyFocusedNode = _this._node;\n\n      if (onFocus) {\n        onFocus(e);\n      }\n\n      if (clearTextOnFocus) {\n        _this.clear();\n      }\n\n      if (selectTextOnFocus) {\n        node && node.select();\n      }\n    };\n\n    _this._handleKeyDown = function (e) {\n      e.stopPropagation();\n\n      if (e.key === 'ArrowLeft' || e.key === 'ArrowUp' || e.key === 'ArrowRight' || e.key === 'ArrowDown' || e.key === 'Backspace' || e.key === 'Escape' || e.key === 'Enter' && e.metaKey || e.key === 'Tab') {\n        _this._handleKeyPress(e);\n      }\n    };\n\n    _this._handleKeyPress = function (e) {\n      var _this$props4 = _this.props,\n          blurOnSubmit = _this$props4.blurOnSubmit,\n          multiline = _this$props4.multiline,\n          onKeyPress = _this$props4.onKeyPress,\n          onSubmitEditing = _this$props4.onSubmitEditing;\n      var blurOnSubmitDefault = !multiline;\n      var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n\n      if (onKeyPress) {\n        var keyValue = e.key;\n\n        if (keyValue) {\n          e.nativeEvent = {\n            altKey: e.altKey,\n            ctrlKey: e.ctrlKey,\n            key: keyValue,\n            metaKey: e.metaKey,\n            shiftKey: e.shiftKey,\n            target: e.target\n          };\n          onKeyPress(e);\n        }\n      }\n\n      if (!e.isDefaultPrevented() && e.key === 'Enter' && !e.shiftKey) {\n        if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n          e.preventDefault();\n          e.nativeEvent = {\n            target: e.target,\n            text: e.target.value\n          };\n          onSubmitEditing(e);\n        }\n\n        if (shouldBlurOnSubmit) {\n          _this.blur();\n        }\n      }\n    };\n\n    _this._handleSelectionChange = function (e) {\n      var _this$props5 = _this.props,\n          onSelectionChange = _this$props5.onSelectionChange,\n          _this$props5$selectio = _this$props5.selection,\n          selection = _this$props5$selectio === void 0 ? emptyObject : _this$props5$selectio;\n\n      if (onSelectionChange) {\n        try {\n          var node = e.target;\n\n          if (isSelectionStale(node, selection)) {\n            var selectionStart = node.selectionStart,\n                selectionEnd = node.selectionEnd;\n            e.nativeEvent.selection = {\n              start: selectionStart,\n              end: selectionEnd\n            };\n            onSelectionChange(e);\n          }\n        } catch (e) {}\n      }\n    };\n\n    _this._setNode = function (component) {\n      _this._node = (0, _findNodeHandle.default)(component);\n\n      if (_this._node) {\n        _this._handleContentSizeChange();\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = TextInput.prototype;\n\n  _proto.clear = function clear() {\n    this._node.value = '';\n  };\n\n  _proto.isFocused = function isFocused() {\n    return _TextInputState.default.currentlyFocusedField() === this._node;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    setSelection(this._node, this.props.selection);\n\n    if (document.activeElement === this._node) {\n      _TextInputState.default._currentlyFocusedNode = this._node;\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    setSelection(this._node, this.props.selection);\n  };\n\n  _proto.render = function render() {\n    var _this$props6 = this.props,\n        _this$props6$autoCapi = _this$props6.autoCapitalize,\n        autoCapitalize = _this$props6$autoCapi === void 0 ? 'sentences' : _this$props6$autoCapi,\n        autoComplete = _this$props6.autoComplete,\n        autoCompleteType = _this$props6.autoCompleteType,\n        _this$props6$autoCorr = _this$props6.autoCorrect,\n        autoCorrect = _this$props6$autoCorr === void 0 ? true : _this$props6$autoCorr,\n        autoFocus = _this$props6.autoFocus,\n        defaultValue = _this$props6.defaultValue,\n        disabled = _this$props6.disabled,\n        _this$props6$editable = _this$props6.editable,\n        editable = _this$props6$editable === void 0 ? true : _this$props6$editable,\n        _this$props6$keyboard = _this$props6.keyboardType,\n        keyboardType = _this$props6$keyboard === void 0 ? 'default' : _this$props6$keyboard,\n        maxLength = _this$props6.maxLength,\n        _this$props6$multilin = _this$props6.multiline,\n        multiline = _this$props6$multilin === void 0 ? false : _this$props6$multilin,\n        _this$props6$numberOf = _this$props6.numberOfLines,\n        numberOfLines = _this$props6$numberOf === void 0 ? 1 : _this$props6$numberOf,\n        placeholder = _this$props6.placeholder,\n        placeholderTextColor = _this$props6.placeholderTextColor,\n        returnKeyType = _this$props6.returnKeyType,\n        _this$props6$secureTe = _this$props6.secureTextEntry,\n        secureTextEntry = _this$props6$secureTe === void 0 ? false : _this$props6$secureTe,\n        spellCheck = _this$props6.spellCheck,\n        style = _this$props6.style,\n        value = _this$props6.value;\n    var type;\n\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n\n      case 'number-pad':\n      case 'numeric':\n        type = 'number';\n        break;\n\n      case 'phone-pad':\n        type = 'tel';\n        break;\n\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n\n      case 'url':\n        type = 'url';\n        break;\n\n      default:\n        type = 'text';\n    }\n\n    if (secureTextEntry) {\n      type = 'password';\n    }\n\n    var component = multiline ? 'textarea' : 'input';\n    var supportedProps = (0, _filterSupportedProps.default)(this.props);\n    (0, _extends2.default)(supportedProps, {\n      autoCapitalize: autoCapitalize,\n      autoComplete: autoComplete || autoCompleteType || 'on',\n      autoCorrect: autoCorrect ? 'on' : 'off',\n      autoFocus: autoFocus,\n      classList: [classes.textinput],\n      defaultValue: defaultValue,\n      dir: 'auto',\n      disabled: disabled,\n      enterkeyhint: returnKeyType,\n      maxLength: maxLength,\n      onBlur: normalizeEventHandler(this._handleBlur),\n      onChange: normalizeEventHandler(this._handleChange),\n      onFocus: normalizeEventHandler(this._handleFocus),\n      onKeyDown: this._handleKeyDown,\n      onKeyPress: this._handleKeyPress,\n      onSelect: normalizeEventHandler(this._handleSelectionChange),\n      placeholder: placeholder,\n      readOnly: !editable,\n      ref: this._setNode,\n      spellCheck: spellCheck != null ? spellCheck : autoCorrect,\n      style: _StyleSheet.default.compose(style, placeholderTextColor && {\n        placeholderTextColor: placeholderTextColor\n      }),\n      value: value\n    });\n\n    if (multiline) {\n      supportedProps.rows = numberOfLines;\n    } else {\n      supportedProps.type = type;\n    }\n\n    return (0, _createElement.default)(component, supportedProps);\n  };\n\n  return TextInput;\n}(_react.default.Component);\n\nTextInput.displayName = 'TextInput';\nTextInput.State = _TextInputState.default;\n\nvar classes = _css.default.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\n\nvar _default = (0, _applyLayout.default)((0, _applyNativeMethods.default)(TextInput));\n\nexports.default = _default;","map":{"version":3,"sources":["E:/Projects/IgniteTrivia/node_modules/react-native-web/dist/exports/TextInput/index.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","isAndroid","canUseDOM","test","navigator","userAgent","emptyObject","normalizeEventHandler","handler","e","nativeEvent","text","target","value","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setTimeout","setSelectionRange","TextInput","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_handleBlur","onBlur","props","TextInputState","_currentlyFocusedNode","_handleContentSizeChange","_this$props","onContentSizeChange","multiline","newHeight","_node","scrollHeight","newWidth","scrollWidth","_nodeHeight","_nodeWidth","contentSize","height","width","_handleChange","_this$props2","onChange","onChangeText","_handleSelectionChange","_handleFocus","_this$props3","clearTextOnFocus","onFocus","selectTextOnFocus","clear","select","_handleKeyDown","stopPropagation","key","metaKey","_handleKeyPress","_this$props4","blurOnSubmit","onKeyPress","onSubmitEditing","blurOnSubmitDefault","shouldBlurOnSubmit","keyValue","altKey","ctrlKey","shiftKey","isDefaultPrevented","preventDefault","blur","_this$props5","onSelectionChange","_this$props5$selectio","_setNode","component","_proto","isFocused","currentlyFocusedField","componentDidMount","document","activeElement","componentDidUpdate","render","_this$props6","_this$props6$autoCapi","autoCapitalize","autoComplete","autoCompleteType","_this$props6$autoCorr","autoCorrect","autoFocus","defaultValue","disabled","_this$props6$editable","editable","_this$props6$keyboard","keyboardType","maxLength","_this$props6$multilin","_this$props6$numberOf","numberOfLines","placeholder","placeholderTextColor","returnKeyType","_this$props6$secureTe","secureTextEntry","spellCheck","style","type","supportedProps","classList","classes","textinput","dir","enterkeyhint","onKeyDown","onSelect","readOnly","ref","StyleSheet","compose","rows","React","Component","displayName","State","css","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"mappings":"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","sourcesContent":["function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport applyLayout from '../../modules/applyLayout';\nimport applyNativeMethods from '../../modules/applyNativeMethods';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createElement from '../createElement';\nimport css from '../StyleSheet/css';\nimport filterSupportedProps from '../View/filterSupportedProps';\nimport findNodeHandle from '../findNodeHandle';\nimport React from 'react';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\nvar isAndroid = canUseDOM && /Android/i.test(navigator && navigator.userAgent);\nvar emptyObject = {};\n/**\n * React Native events differ from W3C events.\n */\n\nvar normalizeEventHandler = function normalizeEventHandler(handler) {\n  return function (e) {\n    if (handler) {\n      e.nativeEvent.text = e.target.value;\n      return handler(e);\n    }\n  };\n};\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\n\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  if (node != null && selection != null) {\n    var selectionEnd = node.selectionEnd,\n        selectionStart = node.selectionStart;\n    var start = selection.start,\n        end = selection.end;\n    return start !== selectionStart || end !== selectionEnd;\n  }\n\n  return false;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = function setSelection(node, selection) {\n  try {\n    if (node != null && selection != null && isSelectionStale(node, selection)) {\n      var start = selection.start,\n          end = selection.end; // workaround for Blink on Android: see https://github.com/text-mask/text-mask/issues/300\n\n      if (isAndroid) {\n        setTimeout(function () {\n          return node.setSelectionRange(start, end || start);\n        }, 10);\n      } else {\n        node.setSelectionRange(start, end || start);\n      }\n    }\n  } catch (e) {}\n};\n\nvar TextInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TextInput, _React$Component);\n\n  function TextInput() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this._handleBlur = function (e) {\n      var onBlur = _this.props.onBlur;\n      TextInputState._currentlyFocusedNode = null;\n\n      if (onBlur) {\n        onBlur(e);\n      }\n    };\n\n    _this._handleContentSizeChange = function () {\n      var _this$props = _this.props,\n          onContentSizeChange = _this$props.onContentSizeChange,\n          multiline = _this$props.multiline;\n\n      if (multiline && onContentSizeChange) {\n        var newHeight = _this._node.scrollHeight;\n        var newWidth = _this._node.scrollWidth;\n\n        if (newHeight !== _this._nodeHeight || newWidth !== _this._nodeWidth) {\n          _this._nodeHeight = newHeight;\n          _this._nodeWidth = newWidth;\n          onContentSizeChange({\n            nativeEvent: {\n              contentSize: {\n                height: _this._nodeHeight,\n                width: _this._nodeWidth\n              }\n            }\n          });\n        }\n      }\n    };\n\n    _this._handleChange = function (e) {\n      var _this$props2 = _this.props,\n          onChange = _this$props2.onChange,\n          onChangeText = _this$props2.onChangeText;\n      var text = e.nativeEvent.text;\n\n      _this._handleContentSizeChange();\n\n      if (onChange) {\n        onChange(e);\n      }\n\n      if (onChangeText) {\n        onChangeText(text);\n      }\n\n      _this._handleSelectionChange(e);\n    };\n\n    _this._handleFocus = function (e) {\n      var _this$props3 = _this.props,\n          clearTextOnFocus = _this$props3.clearTextOnFocus,\n          onFocus = _this$props3.onFocus,\n          selectTextOnFocus = _this$props3.selectTextOnFocus;\n      var node = _this._node;\n      TextInputState._currentlyFocusedNode = _this._node;\n\n      if (onFocus) {\n        onFocus(e);\n      }\n\n      if (clearTextOnFocus) {\n        _this.clear();\n      }\n\n      if (selectTextOnFocus) {\n        node && node.select();\n      }\n    };\n\n    _this._handleKeyDown = function (e) {\n      // Prevent key events bubbling (see #612)\n      e.stopPropagation(); // Backspace, Escape, Tab, Cmd+Enter, and Arrow keys only fire 'keydown'\n      // DOM events\n\n      if (e.key === 'ArrowLeft' || e.key === 'ArrowUp' || e.key === 'ArrowRight' || e.key === 'ArrowDown' || e.key === 'Backspace' || e.key === 'Escape' || e.key === 'Enter' && e.metaKey || e.key === 'Tab') {\n        _this._handleKeyPress(e);\n      }\n    };\n\n    _this._handleKeyPress = function (e) {\n      var _this$props4 = _this.props,\n          blurOnSubmit = _this$props4.blurOnSubmit,\n          multiline = _this$props4.multiline,\n          onKeyPress = _this$props4.onKeyPress,\n          onSubmitEditing = _this$props4.onSubmitEditing;\n      var blurOnSubmitDefault = !multiline;\n      var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n\n      if (onKeyPress) {\n        var keyValue = e.key;\n\n        if (keyValue) {\n          e.nativeEvent = {\n            altKey: e.altKey,\n            ctrlKey: e.ctrlKey,\n            key: keyValue,\n            metaKey: e.metaKey,\n            shiftKey: e.shiftKey,\n            target: e.target\n          };\n          onKeyPress(e);\n        }\n      }\n\n      if (!e.isDefaultPrevented() && e.key === 'Enter' && !e.shiftKey) {\n        if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n          // prevent \"Enter\" from inserting a newline\n          e.preventDefault();\n          e.nativeEvent = {\n            target: e.target,\n            text: e.target.value\n          };\n          onSubmitEditing(e);\n        }\n\n        if (shouldBlurOnSubmit) {\n          // $FlowFixMe\n          _this.blur();\n        }\n      }\n    };\n\n    _this._handleSelectionChange = function (e) {\n      var _this$props5 = _this.props,\n          onSelectionChange = _this$props5.onSelectionChange,\n          _this$props5$selectio = _this$props5.selection,\n          selection = _this$props5$selectio === void 0 ? emptyObject : _this$props5$selectio;\n\n      if (onSelectionChange) {\n        try {\n          var node = e.target;\n\n          if (isSelectionStale(node, selection)) {\n            var selectionStart = node.selectionStart,\n                selectionEnd = node.selectionEnd;\n            e.nativeEvent.selection = {\n              start: selectionStart,\n              end: selectionEnd\n            };\n            onSelectionChange(e);\n          }\n        } catch (e) {}\n      }\n    };\n\n    _this._setNode = function (component) {\n      _this._node = findNodeHandle(component);\n\n      if (_this._node) {\n        _this._handleContentSizeChange();\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = TextInput.prototype;\n\n  _proto.clear = function clear() {\n    this._node.value = '';\n  };\n\n  _proto.isFocused = function isFocused() {\n    return TextInputState.currentlyFocusedField() === this._node;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    setSelection(this._node, this.props.selection);\n\n    if (document.activeElement === this._node) {\n      TextInputState._currentlyFocusedNode = this._node;\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    setSelection(this._node, this.props.selection);\n  };\n\n  _proto.render = function render() {\n    var _this$props6 = this.props,\n        _this$props6$autoCapi = _this$props6.autoCapitalize,\n        autoCapitalize = _this$props6$autoCapi === void 0 ? 'sentences' : _this$props6$autoCapi,\n        autoComplete = _this$props6.autoComplete,\n        autoCompleteType = _this$props6.autoCompleteType,\n        _this$props6$autoCorr = _this$props6.autoCorrect,\n        autoCorrect = _this$props6$autoCorr === void 0 ? true : _this$props6$autoCorr,\n        autoFocus = _this$props6.autoFocus,\n        defaultValue = _this$props6.defaultValue,\n        disabled = _this$props6.disabled,\n        _this$props6$editable = _this$props6.editable,\n        editable = _this$props6$editable === void 0 ? true : _this$props6$editable,\n        _this$props6$keyboard = _this$props6.keyboardType,\n        keyboardType = _this$props6$keyboard === void 0 ? 'default' : _this$props6$keyboard,\n        maxLength = _this$props6.maxLength,\n        _this$props6$multilin = _this$props6.multiline,\n        multiline = _this$props6$multilin === void 0 ? false : _this$props6$multilin,\n        _this$props6$numberOf = _this$props6.numberOfLines,\n        numberOfLines = _this$props6$numberOf === void 0 ? 1 : _this$props6$numberOf,\n        placeholder = _this$props6.placeholder,\n        placeholderTextColor = _this$props6.placeholderTextColor,\n        returnKeyType = _this$props6.returnKeyType,\n        _this$props6$secureTe = _this$props6.secureTextEntry,\n        secureTextEntry = _this$props6$secureTe === void 0 ? false : _this$props6$secureTe,\n        spellCheck = _this$props6.spellCheck,\n        style = _this$props6.style,\n        value = _this$props6.value;\n    var type;\n\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n\n      case 'number-pad':\n      case 'numeric':\n        type = 'number';\n        break;\n\n      case 'phone-pad':\n        type = 'tel';\n        break;\n\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n\n      case 'url':\n        type = 'url';\n        break;\n\n      default:\n        type = 'text';\n    }\n\n    if (secureTextEntry) {\n      type = 'password';\n    }\n\n    var component = multiline ? 'textarea' : 'input';\n    var supportedProps = filterSupportedProps(this.props);\n    Object.assign(supportedProps, {\n      autoCapitalize: autoCapitalize,\n      autoComplete: autoComplete || autoCompleteType || 'on',\n      autoCorrect: autoCorrect ? 'on' : 'off',\n      autoFocus: autoFocus,\n      classList: [classes.textinput],\n      defaultValue: defaultValue,\n      dir: 'auto',\n      disabled: disabled,\n      enterkeyhint: returnKeyType,\n      maxLength: maxLength,\n      onBlur: normalizeEventHandler(this._handleBlur),\n      onChange: normalizeEventHandler(this._handleChange),\n      onFocus: normalizeEventHandler(this._handleFocus),\n      onKeyDown: this._handleKeyDown,\n      onKeyPress: this._handleKeyPress,\n      onSelect: normalizeEventHandler(this._handleSelectionChange),\n      placeholder: placeholder,\n      readOnly: !editable,\n      ref: this._setNode,\n      spellCheck: spellCheck != null ? spellCheck : autoCorrect,\n      style: StyleSheet.compose(style, placeholderTextColor && {\n        placeholderTextColor: placeholderTextColor\n      }),\n      value: value\n    });\n\n    if (multiline) {\n      supportedProps.rows = numberOfLines;\n    } else {\n      supportedProps.type = type;\n    }\n\n    return createElement(component, supportedProps);\n  };\n\n  return TextInput;\n}(React.Component);\n\nTextInput.displayName = 'TextInput';\nTextInput.State = TextInputState;\nvar classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\nexport default applyLayout(applyNativeMethods(TextInput));"]},"metadata":{},"sourceType":"script"}