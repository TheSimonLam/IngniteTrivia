{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuestionStoreModel = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _mobxStateTree = require(\"mobx-state-tree\");\n\nvar _question = require(\"../question\");\n\nvar _extensions = require(\"../../models/extensions\");\n\nvar QuestionStoreModel = _mobxStateTree.types.model(\"QuestionStore\").props({\n  questions: _mobxStateTree.types.optional(_mobxStateTree.types.array(_question.QuestionModel), [])\n}).extend(_extensions.withEnvironment).views(function (self) {\n  return {};\n}).actions(function (self) {\n  return {\n    saveQuestions: function saveQuestions(questionSnapshots) {\n      var questionModels = questionSnapshots.map(function (c) {\n        return _question.QuestionModel.create(c);\n      });\n      self.questions.replace(questionModels);\n    }\n  };\n}).actions(function (self) {\n  return {\n    getQuestions: (0, _mobxStateTree.flow)(_regenerator.default.mark(function _callee() {\n      var result;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return self.environment.api.getQuestions();\n\n            case 2:\n              result = _context.sent;\n\n              if (result.kind === \"ok\") {\n                self.saveQuestions(result.questions);\n              } else {\n                __DEV__ && console.tron.log(result.kind);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))\n  };\n});\n\nexports.QuestionStoreModel = QuestionStoreModel;","map":{"version":3,"sources":["E:/Projects/IgniteTrivia/app/models/question-store/question-store.ts"],"names":["QuestionStoreModel","types","model","props","questions","optional","array","QuestionModel","extend","withEnvironment","views","self","actions","saveQuestions","questionSnapshots","questionModels","map","c","create","replace","getQuestions","environment","api","result","kind","__DEV__","console","tron","log"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAKO,IAAMA,kBAAkB,GAAGC,qBAC/BC,KAD+B,CACzB,eADyB,EAE/BC,KAF+B,CAEzB;AACLC,EAAAA,SAAS,EAAEH,qBAAMI,QAAN,CAAeJ,qBAAMK,KAAN,CAAYC,uBAAZ,CAAf,EAA2C,EAA3C;AADN,CAFyB,EAK/BC,MAL+B,CAKxBC,2BALwB,EAM/BC,KAN+B,CAMzB,UAAAC,IAAI;AAAA,SAAK,EAAL;AAAA,CANqB,EAO/BC,OAP+B,CAOvB,UAAAD,IAAI;AAAA,SAAK;AAChBE,IAAAA,aAAa,EAAE,uBAACC,iBAAD,EAA2C;AACxD,UAAMC,cAA0B,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB,UAAAC,CAAC;AAAA,eAAIV,wBAAcW,MAAd,CAAqBD,CAArB,CAAJ;AAAA,OAAvB,CAAnC;AACAN,MAAAA,IAAI,CAACP,SAAL,CAAee,OAAf,CAAuBJ,cAAvB;AACD;AAJe,GAAL;AAAA,CAPmB,EAa/BH,OAb+B,CAavB,UAAAD,IAAI;AAAA,SAAK;AAChBS,IAAAA,YAAY,EAAE,mDAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,qBAAMT,IAAI,CAACU,WAAL,CAAiBC,GAAjB,CAAqBF,YAArB,EAAN;;AADH;AACXG,cAAAA,MADW;;AAGjB,kBAAIA,MAAM,CAACC,IAAP,KAAgB,IAApB,EAA0B;AACxBb,gBAAAA,IAAI,CAACE,aAAL,CAAmBU,MAAM,CAACnB,SAA1B;AACD,eAFD,MAEO;AACLqB,gBAAAA,OAAO,IAAIC,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBL,MAAM,CAACC,IAAxB,CAAX;AACD;;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAL;AADE,GAAL;AAAA,CAbmB,CAA3B","sourcesContent":["import { Instance, SnapshotOut, types, flow } from \"mobx-state-tree\"\nimport { Question, QuestionModel, QuestionSnapshot } from \"../question\"\nimport { withEnvironment } from \"../../models/extensions\"\n\n/**\n * Model description here for TypeScript hints.\n */\nexport const QuestionStoreModel = types\n  .model(\"QuestionStore\")\n  .props({\n    questions: types.optional(types.array(QuestionModel), []),\n  })\n  .extend(withEnvironment)\n  .views(self => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n  .actions(self => ({\n    saveQuestions: (questionSnapshots: QuestionSnapshot[]) => {\n      const questionModels: Question[] = questionSnapshots.map(c => QuestionModel.create(c)) // create model instances from the plain objects\n      self.questions.replace(questionModels) // Replace the existing data with the new data\n    },\n  }))\n  .actions(self => ({\n    getQuestions: flow(function*() {\n      const result: any = yield self.environment.api.getQuestions()\n\n      if (result.kind === \"ok\") {\n        self.saveQuestions(result.questions)\n      } else {\n        __DEV__ && console.tron.log(result.kind)\n      }\n    }),\n  })) // eslint-disable-line @typescript-eslint/no-unused-vars\n\ntype QuestionStoreType = Instance<typeof QuestionStoreModel>\nexport interface QuestionStore extends QuestionStoreType {}\ntype QuestionStoreSnapshotType = SnapshotOut<typeof QuestionStoreModel>\nexport interface QuestionStoreSnapshot extends QuestionStoreSnapshotType {}\n"]},"metadata":{},"sourceType":"script"}