{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuestionModel = void 0;\n\nvar _mobxStateTree = require(\"mobx-state-tree\");\n\nvar QuestionModel = _mobxStateTree.types.model(\"Question\").props({\n  id: _mobxStateTree.types.identifier,\n  category: _mobxStateTree.types.maybe(_mobxStateTree.types.string),\n  type: _mobxStateTree.types.enumeration([\"multiple\", \"boolean\"]),\n  difficulty: _mobxStateTree.types.enumeration([\"easy\", \"medium\", \"hard\"]),\n  question: _mobxStateTree.types.maybe(_mobxStateTree.types.string),\n  correctAnswer: _mobxStateTree.types.maybe(_mobxStateTree.types.string),\n  incorrectAnswers: _mobxStateTree.types.optional(_mobxStateTree.types.array(_mobxStateTree.types.string), [])\n}).views(function (self) {\n  return {};\n}).actions(function (self) {\n  return {};\n});\n\nexports.QuestionModel = QuestionModel;","map":{"version":3,"sources":["E:/Projects/IgniteTrivia/app/models/question/question.ts"],"names":["QuestionModel","types","model","props","id","identifier","category","maybe","string","type","enumeration","difficulty","question","correctAnswer","incorrectAnswers","optional","array","views","self","actions"],"mappings":";;;;;AAAA;;AAKO,IAAMA,aAAa,GAAGC,qBAC1BC,KAD0B,CACpB,UADoB,EAE1BC,KAF0B,CAEpB;AACLC,EAAAA,EAAE,EAAEH,qBAAMI,UADL;AAELC,EAAAA,QAAQ,EAAEL,qBAAMM,KAAN,CAAYN,qBAAMO,MAAlB,CAFL;AAGLC,EAAAA,IAAI,EAAER,qBAAMS,WAAN,CAAkB,CAAC,UAAD,EAAa,SAAb,CAAlB,CAHD;AAILC,EAAAA,UAAU,EAAEV,qBAAMS,WAAN,CAAkB,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAAlB,CAJP;AAKLE,EAAAA,QAAQ,EAAEX,qBAAMM,KAAN,CAAYN,qBAAMO,MAAlB,CALL;AAMLK,EAAAA,aAAa,EAAEZ,qBAAMM,KAAN,CAAYN,qBAAMO,MAAlB,CANV;AAOLM,EAAAA,gBAAgB,EAAEb,qBAAMc,QAAN,CAAed,qBAAMe,KAAN,CAAYf,qBAAMO,MAAlB,CAAf,EAA0C,EAA1C;AAPb,CAFoB,EAW1BS,KAX0B,CAWpB,UAAAC,IAAI;AAAA,SAAK,EAAL;AAAA,CAXgB,EAY1BC,OAZ0B,CAYlB,UAAAD,IAAI;AAAA,SAAK,EAAL;AAAA,CAZc,CAAtB","sourcesContent":["import { Instance, SnapshotOut, types } from \"mobx-state-tree\"\n\n/**\n * Model description here for TypeScript hints.\n */\nexport const QuestionModel = types\n  .model(\"Question\")\n  .props({\n    id: types.identifier,\n    category: types.maybe(types.string),\n    type: types.enumeration([\"multiple\", \"boolean\"]),\n    difficulty: types.enumeration([\"easy\", \"medium\", \"hard\"]),\n    question: types.maybe(types.string),\n    correctAnswer: types.maybe(types.string),\n    incorrectAnswers: types.optional(types.array(types.string), []),\n  })\n  .views(self => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n  .actions(self => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n  * Un-comment the following to omit model attributes from your snapshots (and from async storage).\n  * Useful for sensitive data like passwords, or transitive state like whether a modal is open.\n\n  * Note that you'll need to import `omit` from ramda, which is already included in the project!\n  *  .postProcessSnapshot(omit([\"password\", \"socialSecurityNumber\", \"creditCardNumber\"]))\n  */\n\ntype QuestionType = Instance<typeof QuestionModel>\nexport interface Question extends QuestionType {}\ntype QuestionSnapshotType = SnapshotOut<typeof QuestionModel>\nexport interface QuestionSnapshot extends QuestionSnapshotType {}\n"]},"metadata":{},"sourceType":"script"}