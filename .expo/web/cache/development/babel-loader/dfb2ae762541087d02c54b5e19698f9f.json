{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Environment = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _api = require(\"../services/api\");\n\nvar ReactotronDev = undefined;\n\nif (__DEV__) {\n  var _require = require(\"../services/reactotron\"),\n      Reactotron = _require.Reactotron;\n\n  ReactotronDev = Reactotron;\n}\n\nvar Environment = function () {\n  function Environment() {\n    (0, _classCallCheck2.default)(this, Environment);\n\n    if (__DEV__) {\n      this.reactotron = new ReactotronDev();\n    }\n\n    this.api = new _api.Api();\n  }\n\n  (0, _createClass2.default)(Environment, [{\n    key: \"setup\",\n    value: function setup() {\n      return _regenerator.default.async(function setup$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!__DEV__) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return _regenerator.default.awrap(this.reactotron.setup());\n\n            case 3:\n              _context.next = 5;\n              return _regenerator.default.awrap(this.api.setup());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Environment;\n}();\n\nexports.Environment = Environment;","map":{"version":3,"sources":["E:/Projects/IgniteTrivia/app/models/environment.ts"],"names":["ReactotronDev","undefined","__DEV__","require","Reactotron","Environment","reactotron","api","Api","setup"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA,IAAIA,aAAa,GAAGC,SAApB;;AACA,IAAIC,OAAJ,EAAa;AAAA,iBACYC,OAAO,CAAC,wBAAD,CADnB;AAAA,MACHC,UADG,YACHA,UADG;;AAEXJ,EAAAA,aAAa,GAAGI,UAAhB;AACD;;IAMYC,W;AACX,yBAAc;AAAA;;AAEZ,QAAIH,OAAJ,EAAa;AAEX,WAAKI,UAAL,GAAkB,IAAIN,aAAJ,EAAlB;AACD;;AACD,SAAKO,GAAL,GAAW,IAAIC,QAAJ,EAAX;AACD;;;;;;;;;mBAIKN,O;;;;;;gDACI,KAAKI,UAAL,CAAgBG,KAAhB,E;;;;gDAEF,KAAKF,GAAL,CAASE,KAAT,E","sourcesContent":["import { Api } from \"../services/api\"\n\nlet ReactotronDev = undefined\nif (__DEV__) {\n  const { Reactotron } = require(\"../services/reactotron\")\n  ReactotronDev = Reactotron\n}\n\n/**\n * The environment is a place where services and shared dependencies between\n * models live.  They are made available to every model via dependency injection.\n */\nexport class Environment {\n  constructor() {\n    // create each service\n    if (__DEV__) {\n      // dev-only services\n      this.reactotron = new ReactotronDev()\n    }\n    this.api = new Api()\n  }\n\n  async setup() {\n    // allow each service to setup\n    if (__DEV__) {\n      await this.reactotron.setup()\n    }\n    await this.api.setup()\n  }\n\n  /**\n   * Reactotron is only available in dev.\n   */\n  reactotron: typeof ReactotronDev\n\n  /**\n   * Our api.\n   */\n  api: Api\n}\n"]},"metadata":{},"sourceType":"script"}