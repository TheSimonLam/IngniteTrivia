{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useBackButtonHandler = useBackButtonHandler;\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _getActiveRoutename = _interopRequireDefault(require(\"./get-active-routename\"));\n\nfunction useBackButtonHandler(ref, canExit) {\n  var canExitRef = (0, _react.useRef)(canExit);\n  (0, _react.useEffect)(function () {\n    canExitRef.current = canExit;\n  }, [canExit]);\n  (0, _react.useEffect)(function () {\n    var onBackPress = function onBackPress() {\n      var navigation = ref.current;\n\n      if (navigation == null) {\n        return false;\n      }\n\n      var routeName = (0, _getActiveRoutename.default)(navigation.getRootState());\n\n      if (canExitRef.current(routeName)) {\n        return false;\n      }\n\n      if (navigation.canGoBack()) {\n        navigation.goBack();\n        return true;\n      }\n\n      return false;\n    };\n\n    _reactNative.BackHandler.addEventListener(\"hardwareBackPress\", onBackPress);\n\n    return function () {\n      return _reactNative.BackHandler.removeEventListener(\"hardwareBackPress\", onBackPress);\n    };\n  }, [ref]);\n}","map":{"version":3,"sources":["E:/Projects/IgniteTrivia/app/navigation/use-back-button-handler.tsx"],"names":["useBackButtonHandler","ref","canExit","canExitRef","current","onBackPress","navigation","routeName","getRootState","canGoBack","goBack","BackHandler","addEventListener","removeEventListener"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEO,SAASA,oBAAT,CACLC,GADK,EAELC,OAFK,EAGL;AACA,MAAMC,UAAU,GAAG,mBAAOD,OAAP,CAAnB;AAEA,wBAAU,YAAM;AACdC,IAAAA,UAAU,CAACC,OAAX,GAAqBF,OAArB;AACD,GAFD,EAEG,CAACA,OAAD,CAFH;AAIA,wBAAU,YAAM;AAEd,QAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,UAAMC,UAAU,GAAGL,GAAG,CAACG,OAAvB;;AAEA,UAAIE,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAO,KAAP;AACD;;AAGD,UAAMC,SAAS,GAAG,iCAAmBD,UAAU,CAACE,YAAX,EAAnB,CAAlB;;AAGA,UAAIL,UAAU,CAACC,OAAX,CAAmBG,SAAnB,CAAJ,EAAmC;AAEjC,eAAO,KAAP;AACD;;AAGD,UAAID,UAAU,CAACG,SAAX,EAAJ,EAA4B;AAC1BH,QAAAA,UAAU,CAACI,MAAX;AAEA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KAxBD;;AA2BAC,6BAAYC,gBAAZ,CAA6B,mBAA7B,EAAkDP,WAAlD;;AAGA,WAAO;AAAA,aAAMM,yBAAYE,mBAAZ,CAAgC,mBAAhC,EAAqDR,WAArD,CAAN;AAAA,KAAP;AACD,GAjCD,EAiCG,CAACJ,GAAD,CAjCH;AAkCD","sourcesContent":["import { useEffect, useRef } from \"react\"\nimport { BackHandler } from \"react-native\"\nimport { NavigationContainerRef } from \"@react-navigation/native\"\nimport getActiveRouteName from \"./get-active-routename\"\n\nexport function useBackButtonHandler(\n  ref: React.RefObject<NavigationContainerRef>,\n  canExit: (routeName: string) => boolean,\n) {\n  const canExitRef = useRef(canExit)\n\n  useEffect(() => {\n    canExitRef.current = canExit\n  }, [canExit])\n\n  useEffect(() => {\n    // We'll fire this when the back button is pressed on Android.\n    const onBackPress = () => {\n      const navigation = ref.current\n\n      if (navigation == null) {\n        return false\n      }\n\n      // grab the current route\n      const routeName = getActiveRouteName(navigation.getRootState())\n\n      // are we allowed to exit?\n      if (canExitRef.current(routeName)) {\n        // let the system know we've not handled this event\n        return false\n      }\n\n      // we can't exit, so let's turn this into a back action\n      if (navigation.canGoBack()) {\n        navigation.goBack()\n\n        return true\n      }\n\n      return false\n    }\n\n    // Subscribe when we come to life\n    BackHandler.addEventListener(\"hardwareBackPress\", onBackPress)\n\n    // Unsubscribe when we're done\n    return () => BackHandler.removeEventListener(\"hardwareBackPress\", onBackPress)\n  }, [ref])\n}\n"]},"metadata":{},"sourceType":"script"}